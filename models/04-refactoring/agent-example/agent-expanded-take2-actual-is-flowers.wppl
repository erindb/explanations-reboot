

// -------- base program sub-functions --------
var utility = function(item, items, utilityCoefs) {
	var dimensions = _.keys(utilityCoefs);
	return sum(map(function(dim) {
		return utilityCoefs[dim] * items[item][dim];
	}, dimensions));
};

var getActionPosterior = function(items, utilityCoefs, rationality, infer) {
	return infer(function() {
		var item = uniformDraw(_.keys(items));
		factor(rationality * utility(item, items, utilityCoefs));
		return item;
	});
};

// -------- base program counterfactualizable transformation --------

var makeProgram = function(structureParams, origStructureParams) {
	return function (input, sampleParams, origInput, origSampleParams) {
		var items = input.items;
		var utilityCoefs = structureParams.utilityCoefs;
		var rationality = structureParams.rationality;
		var infer = function(fn) {
			return Infer({method: "enumerate"}, fn);
		};
		var actionPosterior = getActionPosterior(
			items, utilityCoefs, rationality, infer
		);
		var action = stickySample({
			erp: actionPosterior,
			erpLabel: "action",
			currentLatents: {
				input: input,
				structureParams: structureParams,
				sampleParams: sampleParams
			},
			origLatents: {
				input: origInput,
				structureParams: origStructureParams,
				sampleParams: origSampleParams
			}
		});

		// explaining expression values
		var expressions = {
			// 'items["cupcakes"]["prettiness"]': items["cupcakes"]["prettiness"],
			// 'items["cupcakes"]["yumminess"]': items["cupcakes"]["yumminess"],
			// 'items["flowers"]["prettiness"]': items["flowers"]["prettiness"],
			// 'items["flowers"]["yumminess"]': items["flowers"]["yumminess"],
			// 'items["brownies"]["prettiness"]': items["brownies"]["prettiness"],
			// 'items["brownies"]["yumminess"]': items["brownies"]["yumminess"],
			// 'items["money"]["prettiness"]': items["money"]["prettiness"],
			// 'items["money"]["yumminess"]': items["money"]["yumminess"],
			'utilityCoefs["prettiness"]': utilityCoefs["prettiness"],
			'utilityCoefs["yumminess"]': utilityCoefs["yumminess"],
			'rationality': rationality
		};

		return {expressionValues: expressions, output: action};
	};
};

// -------- CF priors --------

var items = function(domainParams) {
	var itemPrior = function(dims) {
		return _.object(map(function(d) {
			return [d, uniformDraw([0,1])];
		}, dims));
	};

	return _.object(map(function(n) {
		return [n, itemPrior(domainParams.dims)];
	}, domainParams.names));
};

var utilityCoefs = function(domainParams) {
	return _.object(map(function(d) {
		return [d, uniformDraw([0,1])];
	}, domainParams.dims));
};

var rationality = function(domainParams) {
	return uniformDraw([1,2,4]);
};

var sampleParams = function(domainParams) {
	return _.object(map(function(s) {
		return [s, uniform(0,1)];
	}, domainParams.samples));
};

var cfPrior = function() {

	var domainParams = {
		dims: ["prettiness", "yumminess"],
		names: ["money", "brownies", "flowers", "cupcakes"],
		samples: ["action"]
	};

	return {
		input: {
			items: items(domainParams)
		},
		structureParams: {
			utilityCoefs: utilityCoefs(domainParams),
			rationality: rationality(domainParams)
		},
		sampleParams: sampleParams(domainParams)
	};
};

// -------- actual base program data --------

var observations = {
	structureParams: {
		utilityCoefs: {prettiness: 1, yumminess: 1},
		rationality: 1
	},
	input: {
		items: {
			money: {prettiness: 0, yumminess: 0},
			brownies: {prettiness: 0, yumminess: 1},
			flowers: {prettiness: 1, yumminess: 0},
			cupcakes: {prettiness: 1, yumminess: 1},
		}
	},
	output: "flowers"
};

// -------- explanation logic ----

var stickySample = function(args) {
	var erp = args.erp;
	var currentLatents = args.currentLatents;
	var originalLatents = args.originalLatents;
	var erpLabel = args.erpLabel;

	var probability = (currentLatents.sampleParams)[erpLabel];

	// TODO: make this sensibly sticky (????)
	if (originalLatents) {
		return jsUtils.inverseCDFMaxOverlapWithLookup(erp, probability, currentLatents, originalLatents);
	} else {
		return jsUtils.inverseCDFWithLog(erp, probability, currentLatents);
	}
};

var combineObjList = function(objLst) {
	if (objLst.length==1) {
		return objLst[0];
	} else {
		return _.extend(
			_.clone(objLst[0]),
			combineObjList(
				objLst.slice(1, objLst.length)
			)
		);
	}
};

var counterfactualizeLatents = function(model, actual) {
	var s = 0.53; //stickiness
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var marginalize = function(erp, value) {
	return Infer(
		{method: "enumerate"},
		function() {
			return sample(erp)[value]
		}
	);
};

var match = function(inferred, observed) {
	var overlappingKeys = _.object(map(function(k) {
		return [k, inferred[k]];
	}, _.keys(observed)));

	return _.isEqual(overlappingKeys, observed);
};

var imagineCounterfactuals = function(explainingExpression) {
	return function() {
		var latents = cfPrior();

		// observed
		var structureParams = latents.structureParams;
		condition(match(structureParams, observations.structureParams));

		// observed
		var input = latents.input;
		condition(match(input, observations.input));

		// unobserved
		var sampleParams = latents.sampleParams;

		var program = makeProgram(structureParams);

		// observed
		var programReturns = program(input, sampleParams);
		var output = programReturns.output;
		condition(output == observations.output);

		// counterfactuals!!
		var cfLatents = counterfactualizeLatents(cfPrior, latents);
		var cfInput = cfLatents.input;
		var cfStructureParams = cfLatents.structureParams;
		var cfSampleParams = cfLatents.sampleParams;
		var cfProgram = makeProgram(cfStructureParams, structureParams);
		var cfProgramReturns = cfProgram(cfInput, cfSampleParams, input, sampleParams);
		var cfOutput = cfProgramReturns.output;

		if (explainingExpression) {
			// condition on explaining expression value changing
			var explainingExpressionValue = programReturns.expressionValues[explainingExpression];
			var cfExplainingExpressionValue = cfProgramReturns.expressionValues[explainingExpression];
			condition(explainingExpressionValue!=cfExplainingExpressionValue);
		};

		// does output change?
		var outputChange = output != cfOutput;

		return {
			actual: {latents: latents, output: output},
			cf: {latents: cfLatents, output: cfOutput},
			outputChange: outputChange
		}
	};
};

var imagineCounterfactualNoConditioning = imagineCounterfactuals();

var counterfactualPosterior = cache(function(explainingExpression) {
	return Infer(
		{method: "MCMC", samples: 5000},
		imagineCounterfactuals(explainingExpression)
	);
});

var explanationModel = function() {

	var explainingExpression = uniformDraw([
		// 'items["cupcakes"]["prettiness"]',
		// 'items["cupcakes"]["yumminess"]',
		// 'items["flowers"]["prettiness"]',
		// 'items["flowers"]["yumminess"]',
		// 'items["brownies"]["prettiness"]',
		// 'items["brownies"]["yumminess"]',
		// 'items["money"]["prettiness"]',
		// 'items["money"]["yumminess"]',
		'utilityCoefs["prettiness"]',
		'utilityCoefs["yumminess"]',
		'rationality'
	]);

	var cfReturns = counterfactualPosterior(explainingExpression);

	var outputChangeMarginal = marginalize(cfReturns, "outputChange");

	factor(10*outputChangeMarginal.score(true));

	return explainingExpression;
};

"finished";
