// from MH: https://github.com/mhtess/generics/blob/master/models/node_modules/asymutils/asymutils.js

var fs = require('fs');
var babyparse = require('babyparse');

var erpWriter = function(erp, filename) {
 var supp = erp.support([]);
 var csvFile = fs.openSync(filename, 'w');
 fs.writeSync(csvFile,'Parameter,Item,Prevalence,Value,Probability\n')
 supp.forEach(function(s) {supportWriter(s, Math.exp(erp.score([], s)), csvFile);})
 fs.closeSync(csvFile);
}

var supportWriter = function(s, p, handle) {
 var sLst = _.pairs(s);
 var l = sLst.length;

 for (var i = 0; i < l; i++) {
   fs.writeSync(handle, sLst[i].join(',')+','+p+'\n');
 }
}

function retype(value, type) {
  if (type=='num') {
    return parseFloat(value);
  } else if (type=='bool') {
    return ['True', 'T', 'TRUE', 'true', '#t', '1', 1].indexOf(value) >= 0;
  }
  return value;
}

function readCSV(filename, args){
  var output = babyparse.parse(fs.readFileSync(filename, 'utf8'));
  if (output.data[output.data.length-1].length==1) {
    output.data = output.data.slice(0, output.data.length-1);
  }
  if (args.header) {
    output.columns = {};
    var keys = output.data[0];
    for (var i=0; i<keys.length; i++) {
      output.columns[keys[i]] = [];
    }
    output.data = output.data.slice(1);
    output.data = output.data.map(function(values) {
      var newObject = {};
      for (var i=0; i<values.length; i++) {
        if (args.types) {
          newValue = retype(values[i], args.types[i]);
        } else {
          newValue = values[i];
        }
        newObject[keys[i]] = newValue;
        output.columns[keys[i]].push(newValue);
      }
      return newObject;
    })
  }
  return output;
};

function writeCSV(jsonCSV, filename){
  fs.writeFileSync(filename, babyparse.unparse(jsonCSV) + "\n");
};

function wpParseFloat(x){
  return parseFloat(x);
};

module.exports = {
  readCSV: readCSV,
  writeCSV: writeCSV,
  wpParseFloat: wpParseFloat,
  erpWriter:erpWriter
};