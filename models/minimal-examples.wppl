var examples = {
	AB: function(args) {
		var backgroundA = args.backgroundA;
		var causalStrength = args.causalStrength;
		var backgroundB = args.backgroundB;
		if (causalStrength>0) {
			return {
				latents: function() {
					return {
						A: flip(backgroundA),
						B: flip(backgroundB),
						causeHolds: flip(causalStrength)
					}
				},
				states: function(latents) {
					var A = latents.A;
					var B = latents.B ? true : (latents.A && latents.causeHolds ? true : false);
					return {A: A, B: B}
				}
			};
		} else if (causalStrength<0) {
			return {
				latents: function() {
					return {
						A: flip(backgroundA),
						B: flip(backgroundB),
						causeHolds: flip(-causalStrength)
					}
				},
				states: function(latents) {
					var B = latents.B;
					var A = latents.A ? true : (latents.B && latents.causeHolds ? true : false);
					return {A: A, B: B}
				}
			}
		} else {
			return {
				latents: function() {
					return {
						A: flip(backgroundA),
						B: flip(backgroundB)
					};
				},
				states: function(latents) { return latents; }
			}
		}
	},
	ABC: function() {},
	modelUncertainty: function() {},
};

var generator = examples.AB;
var example = generator({backgroundA: 0.5, backgroundB: 0, causalStrength: 1});
var latentsModel = example.latents;
var statesModel = example.states;

var counterfactualizeLatents = function(model, actual) {
	var s = 0.53; //stickiness
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var counterfactually = function(args) {
	var ifVariable = args.ifVariable ? args.ifVariable : null;
	var hadBeen = args.hadBeen ? args.hadBeen : null;
	var thenVariable = args.thenVariable;
	var wouldHaveBeen = args.wouldHaveBeen;
	var specifiedLatents = args.givenActualLatents;
	var specifiedStates = args.givenActualStates;
	return infer(function() {

		var actulLatents = specifiedLatents ? specifiedLatents : latentsModel();
		var actualStates = statesModel(actulLatents);
		if (specifiedStates) {
			condition(_.isEqual(specifiedStates, actualStates));
		}

		var cfLatents = counterfactualizeLatents(latentsModel, actulLatents);
		var cfStates = statesModel(cfLatents);
		if (ifVariable) { condition(cfStates[ifVariable]==hadBeen) }
		return cfStates[thenVariable]==wouldHaveBeen
	});
};

var because = function(args) {
	var explanans = args.becauseVariable;
	var explanansValue = args.happenedToBe;
	var explanandum = args.variableToExplain;
	var explanandumValue = args.wasTherefore;
	var actualState = args.actualState;

	// counterfactually if not explanation,
	// then "variableToExplain" would be different
	return infer(function() {
		var explanation = flip();
		factor(counterfactually({
			ifVariable: explanation ? explanans : null,
			hadBeen: explanation ? !explanansValue : null,
			thenVariable: explanandum,
			wouldHaveBeen: explanandumValue,
			specifiedStates: actualState
		}).score(true));
		return explanation;
	});
};

var actualState = {A: true, B: true};
var endorsementOfExplanation = probTrue(because({
	becauseVariable: "A",
	happenedToBe: true,
	variableToExplain: "B",
	wasTherefore: true,
	actualState: actualState
}));
display('is "B because A" better than ""?');
display(endorsementOfExplanation);


// map(function(variables) {
// 	var exampleGenerator = examples[variables];
// 	map(function(backgroundA) {
// 		map(function(backgroundB) {
// 			map(function(causalStrength) {
				
// 				var example = exampleGenerator({
// 					backgroundA: backgroundA,
// 					backgroundB: backgroundB,
// 					causalStrength: causalStrength
// 				});
// 				// display("");
// 				// display("A->B: " + causalStrength +
// 				// 	";  backgroundA: " + backgroundA +
// 				// 	";  backgroundB: " + backgroundB);

// 				var latentsModel = example.latents;
// 				var statesModel = example.states;

// 				var posterior = infer(function() {
// 					var latents = latentsModel();
// 					var states = statesModel(latents);
// 					return states;
// 				});
// 				var marginalA = probTrue(marginal(posterior, "A"));
// 				var marginalB = probTrue(marginal(posterior, "B"));

// 				// enumerate explanations

				
// 				map(function(actualState) {
// 					// get an actual world from the support
// 					map(function(variableToExplain) {
// 						// get a variable whose state to explain
// 						// rate explanations of that variable

// 						var otherVariabe = variableToExplain=="A" ? "B" : "A";

// 						// display("");
// 						// display("why is " + variableToExplain + " " + actualState[variableToExplain] + "?");
// 						// display("because " + otherVariabe + " is " + actualState[variableToExplain]);
// 						// display(
// 						// 	"(that is, if " + otherVariabe + " had been " + 
// 						// 	!actualState[otherVariabe] + " then " +
// 						// 	variableToExplain + " would have been " + 
// 						// 	!actualState[variableToExplain] + ".)"
// 						// );
// 						// display("or say nothing");
// 						// display("");
// 						var endorsementOfExplanation = because({
// 							otherVariabe: otherVariabe,
// 							happenedToBe: actualState[otherVariabe],
// 							variableToExplain: variableToExplain,
// 							wasTherefore: actualState[variableToExplain],
// 							actualState: actualState
// 						});

// 						display([
// 							variables, backgroundA, backgroundB, causalStrength,
// 							marginalA, marginalB, actualState.A, actualState.B,
// 							variableToExplain
// 						].join(","));

// 					}, ["A", "B"]);
// 				}, posterior.support());

// 			}, [-1, -0.9, -0.5, -0.1, 0, 0.1, 0.5, 0.9, 1]);
// 		}, [0, 0.1, 0.5, 0.9, 1]);
// 	}, [0, 0.1, 0.5, 0.9, 1]);
// }, ["AB"]);

"finished"