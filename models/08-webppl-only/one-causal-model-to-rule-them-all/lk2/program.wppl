var program = function(input) {

	var causeAB = true;
	var causeBC = true;

	// when `dirAB` is true, the alphabetically
	// earlier variable is causally upstream of
	// the other.
	var dirAB = true;
	var dirBC = true;

	// `enabledAB` says whether the cause was
	// enabled, this is an "actual cause"
	// variable, for when causal power is
	// less than 1
	var actualAB = input.ab;
	var actualBC = input.bc;

	// placeholders
	var actualBA = input.ba;
	var actualCB = input.cb;

	// priors when no causal parents
	var pA = input.A;
	// placeholders
	var pB = input.B;
	var pC = input.C;

	var valuesABC = (function() {
		if (causeBC && !dirBC) {
			if (causeAB && dirAB) {
				// in this situation, B is a function
				// of both A and B
				var valuesABC = twoParents({
					parentVar1: "A",
					parentVar2: "C",
					childVar: "B",
					// both causes are enabled
					// directions are determined
					actual1: actualAB,
					actual2: actualCB,
					parentP1: pA,
					parentP2: pC
				});
				return valuesABC;
			} else {
				var valuesBC = getTwoVariables({
					var1: "B",
					var2: "C",
					cause: causeBC,
					dir: dirBC,
					p1: pB,
					p2: pC,
					actual12: actualBC, // cause is deterministic
					actual21: actualCB // cause is deterministic
				});
				var valueA = getNextVariable({
					parent: valuesBC.B,
					cause: causeAB,
					p: pA,
					actualCause: actualBA
				});
				return {
					A: valueA,
					B: valuesBC.B,
					C: valuesBC.C
				}
			}
		} else {
			var valuesAB = getTwoVariables({
				var1: "A",
				var2: "B",
				cause: causeAB,
				dir: dirAB,
				p1: pA,
				p2: pB,
				actual12: actualAB, // cause is deterministic
				actual21: actualBA // cause is deterministic
			});
			var valueC = getNextVariable({
				parent: valuesAB.B,
				cause: causeBC,
				p: pC,
				actualCause: actualBC
			});
			return {
				A: valuesAB.A,
				B: valuesAB.B,
				C: valueC
			}
		}
	})();

	var A = valuesABC.A;
	var B = valuesABC.B;
	var C = valuesABC.C;

	return {
		A: A,
		B: B,
		C: C
	};
};

var input = {
	A: true,
	ab: true,
	bc: true
};

program(input);
