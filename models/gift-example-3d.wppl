var examples = {
  "cupcakes, flowers, and brownies": {
    latents: function() {
      // care or don't care about dimensions with equal probability
      return {
        // actionRandomness: sample(UniformDrift({a: 0, b: 1, r: 0.1})),
        actionRandomness: discreteUniform(),
        prettinessCoef: uniformDraw([0, 1]),
        yumminessCoef: uniformDraw([0, 1]),
        rationality: 1000 // could change this to something lower later
      };
    },
    states: function(latents) {
      var actionRandomness = latents.actionRandomness;
      var prettinessCoef = latents.prettinessCoef;
      var yumminessCoef = latents.yumminessCoef;
      var rationality = latents.rationality;

      var coefs = {prettiness: prettinessCoef, yumminess: yumminessCoef};

      var features = {
        cupcakes: {prettiness: 1, yumminess: 1},
        flowers: {prettiness: 1, yumminess: 0},
        brownies: {prettiness: 0, yumminess: 1}
      };

      var actionPosterior = infer(function() {
        var actionChoice = uniformDraw(["cupcakes", "flowers", "brownies"]);
        var utility = features[actionChoice].prettiness*prettinessCoef + 
          features[actionChoice].yumminess*yumminessCoef;
        factor(utility*rationality);
        return actionChoice;
      });

      var action = sampleWithUniformRV(actionPosterior, actionRandomness);

      return {
        prettiness: prettinessCoef,
        yumminess: yumminessCoef,
        action: action
      }
    }
  },
  "3 dimensions": {
    latents: function() {
      return {
        actionRandomness: discreteUniform(),
        prettinessCoef: uniformDraw([0, 1]),
        yumminessCoef: uniformDraw([0, 1]),
        shelfLifeCoef: uniformDraw([0, 1]),
        rationality: 1000 // could change this to something lower later
      };
    },
    states: function(latents) {
      var actionRandomness = latents.actionRandomness;
      var prettinessCoef = latents.prettinessCoef;
      var yumminessCoef = latents.yumminessCoef;
      var shelfLifeCoef = latents.shelfLifeCoef;
      var rationality = latents.rationality;

      var features = {
        cupcakes: {prettiness: 1, yumminess: 1, shelfLife: 0},
        flowers: {prettiness: 1, yumminess: 0, shelfLife: 0},
        brownies: {prettiness: 0, yumminess: 1, shelfLife: 0},
        letter: {prettiness: 0, yumminess: 0, shelfLife: 1},
        necklace: {prettiness: 1, yumminess: 0, shelfLife: 1},
        wine: {prettiness: 0, yumminess: 1, shelfLife: 1},
        chocolates: {prettiness: 1, yumminess: 1, shelfLife: 1}
      };

      var actionPosterior = infer(function() {
        var actionChoice = uniformDraw([
          "cupcakes", "flowers", "brownies",
          "letter", "necklace", "wine",
          "chocolates"
        ]);
        var utility = features[actionChoice].prettiness*prettinessCoef + 
          features[actionChoice].yumminess*yumminessCoef +
          features[actionChoice].shelfLife*shelfLifeCoef;
        factor(utility*rationality);
        return actionChoice;
      });

      var action = sampleWithUniformRV(actionPosterior, actionRandomness);

      return {
        prettiness: prettinessCoef,
        yumminess: yumminessCoef,
        shelfLife: shelfLifeCoef,
        action: action
      };
    }
  }
};

// --------------- counterfactuals --------------------

var counterfactualizeLatents = function(model, actual) {
  var s = 0.53; //stickiness
  var totallyDifferent = model();

  return mapObject(function(key, value) {
    return flip(s) ? actual[key] : totallyDifferent[key];
  }, actual);
};

// ----------------- ask why ---------------------------

var actualStates = {
  prettiness: 1,
  yumminess: 1,
  shelfLife: 0,
  action: "chocolates"
};

var example = examples["3 dimensions"];
var latentsModel = example.latents;
var statesModel = example.states;
var possibleExplanations = ["prettiness", "yumminess", "shelfLife"];

// var forwardModel = function() {
//   var latents = latentsModel();
//   var states = statesModel(latents);
//   return states;
// };

var propositions = {
  action: function(states) {
    return states.action==actualStates.action;
  },
  "action==cupcakes": function(states) {
    return states.action=="cupcakes";
  },
  "action==brownies": function(states) {
    return states.action=="brownies";
  },
  "action==flowers": function(states) {
    return states.action=="flowers";
  },
  prettiness: function(states) {
    return states.prettiness==actualStates.prettiness;
  },
  yumminess: function(states) {
    return states.yumminess==actualStates.yumminess;
  },
  shelfLife: function(states) {
    return states.shelfLife==actualStates.shelfLife;
  }
};

// // "action was cupcakes because i cared about prettiness."
// // interpret a given explanation's ability to change the explanadum
// var ifNotPrettinessThenNotCupcakes = function() {

//   // infer latents from actual states
//   var latents = latentsModel();
//   var states = statesModel(latents);
//   condition(_.isEqual(states, actualStates));

//   // sample a counterfactual world
//   var cfLatents = counterfactualizeLatents(latentsModel, latents);
//   var cfStates = statesModel(cfLatents);

//   // condition on explanation being false
//   var explanationFn = propositions["prettiness"];
//   condition(!explanationFn(cfStates));

//   // return whether explanandum is false
//   var explanadumFn = propositions["action"];
//   return !explanadumFn(cfStates);
// };

var propositionToExplain = "action";
var alternativeProposition = null;

var why = function() {
  var explanation = uniformDraw(possibleExplanations);
  // get counterfactual probability of proposition to explain
  // being false given that explanation is false.
  var ifNotExplanationThenNotExplanandum = infer(function() {
    // infer latents from actual states
    var latents = latentsModel();
    var states = statesModel(latents);
    condition(_.isEqual(states, actualStates));

    // sample a counterfactual world
    var cfLatents = counterfactualizeLatents(latentsModel, latents);
    var cfStates = statesModel(cfLatents);

    // condition on explanation being false
    var explanationFn = propositions[explanation];
    condition(!explanationFn(cfStates));

    if (alternativeProposition) {
      // return whether the thing i expected is true
      var alternativeFn = propositions[alternativeProposition];
      return alternativeFn(cfStates);
    } else {
      // return whether explanandum is false
      var explanadumFn = propositions[propositionToExplain];
      return !explanadumFn(cfStates);
    }
  });
  // factor based on that.
  factor(ifNotExplanationThenNotExplanandum.score(true));

  return {
    explanation: explanation,
    prettinessCoef: actualStates.prettiness,
    yumminessCoef: actualStates.yumminess,
    shelfLifeCoef: actualStates.shelfLifeCoef,
    actionChoice: actualStates.action
  };
};

display(infer(why));

"finished"
