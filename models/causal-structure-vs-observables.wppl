// are A and B causally connected?

var infer = function(fn) {return Infer({method: 'enumerate'}, fn); };

// if A and B are causally connected,
// then B is true whenever A is.
// otherwise, B is false.
var latentsModel = function() {
	return {
		model: uniformDraw(["A->B", "A,B"]),
		A: flip()//,
		// Bbackground: flip(0.9)
	};
};

var statesModel = function(latents) {
	var A = latents.A;
	var B = (latents.model=="A->B") ? A : false;
	// var B = (A && latents.model=="A->B") ? true : (latents.Bbackground ? true : false);
	var connected = latents.model=="A->B";
	return { A: A, B: B, connected: connected };
};

var counterfactualizeLatents = function(model, actual) {
	var s = 0.53; //stickiness
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var counterfactually = function(args) {
	var ifVariable = args.ifVariable;
	var hadBeen = args.hadBeen;
	var thenVariable = args.thenVariable;
	var wouldhaveBeen = args.wouldhaveBeen;
	return infer(function() {

		var actulLatents = args.givenActualLatents ? args.givenActualLatents : latentsModel();
		var actualStates = statesModel(actulLatents);
		if (args.givenActualStates) {
			condition(_.isEqual(args.givenActualStates, actualStates));
		}

		var cfLatents = counterfactualizeLatents(latentsModel, actulLatents);
		var cfStates = statesModel(cfLatents);
		condition(cfStates[ifVariable]==hadBeen);
		return cfStates[thenVariable]==wouldhaveBeen
	});
};

var utterancePrior = function() {
	return categorical(
		[ Math.exp(0), Math.exp(-3) ],
		[
			[''],
			['B', 'because', 'A']
		]
	);
};

var literal = function(utterance) {
	return infer(function() {
		var latents = latentsModel();
		var states = statesModel(latents);
		if (utterance.length>1) {
			if (utterance[1]=='because') {
				var scoreUtt = counterfactually({
					ifVariable: utterance[2],
					hadBeen: false,
					thenVariable: utterance[0],
					wouldhaveBeen: false,
					givenActualStates: states
				}).score(true);
				factor(scoreUtt);
			}
		}
		return states;
	});
};

var speaker = function(states, qud) {
	return infer(function() {
		var utterance = utterancePrior();
		var interpretation = sample(literal(utterance));
		// condition(_.isEqual(interpretation, states));
		condition(interpretation[qud]==states[qud]);
		return utterance;
	});
};

var listener = function(utterance, qud, commonGround) {
	return infer(function() {
		var latents = latentsModel();
		var states = statesModel(latents);

		// if (commonGround.A) { condition(commonGround.A == states.A); };
		// if (commonGround.B) { condition(commonGround.B == states.B); };
		// if (commonGround.connected) { condition(commonGround.connected == states.connected); };

		factor(speaker(states, qud).score(utterance));
		
		return states;
	});
};

display(listener(['B', 'because', 'A'], 'connected', {A: true, B: true}));

// display(speaker({A: true, B: true, connected: true}, "connected"))

// display(literal(['B', 'cause', 'A']));
// display(literal(['']));
// display(literal(['A', 'cause', 'B']));

// var latents = latentsModel();
// var states = statesModel(latents);
// display(states);

// display("If not A then not B (when connected)");
// display(counterfactually({
// 	ifVariable: "A",
// 	hadBeen: false,
// 	thenVariable: "B",
// 	wouldhaveBeen: false,
// 	givenActualStates: {connected: true, A: true, B: true}
// }));
// display("If not B then not A (when connected)")
// display(counterfactually({
// 	ifVariable: "B",
// 	hadBeen: false,
// 	thenVariable: "A",
// 	wouldhaveBeen: false,
// 	givenActualStates: {connected: true, A: true, B: true}
// }));
// display("If not A then not B (when not connected)");
// display(counterfactually({
// 	ifVariable: "A",
// 	hadBeen: false,
// 	thenVariable: "B",
// 	wouldhaveBeen: false,
// 	givenActualStates: {connected: false, A: true, B: true}
// }));
// display("If not B then not A (when not connected)")
// display(counterfactually({
// 	ifVariable: "B",
// 	hadBeen: false,
// 	thenVariable: "A",
// 	wouldhaveBeen: false,
// 	givenActualStates: {connected: false, A: true, B: true}
// }));

"finished";