// are A and B causally connected?

var infer = function(fn) {return Infer({method: 'enumerate'}, fn); };

// if A and B are causally connected,
// then B is true whenever A is.
// otherwise, B is false.
var latentsModel = function() {
	return {
		model: uniformDraw(["A->B", "A,B"]),
		A: flip()
	};
};

var statesModel = function(latents) {
	var A = latents.A;
	var B = latents.model=="A->B" ? A : false;
	var connected = latents.model=="A->B";
	return { A: A, B: B, connected: connected };
};

var counterfactualizeLatents = function(model, actual) {
	var s = 0.53; //stickiness
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var counterfactually = function(args) {
	var ifVariable = args.ifVariable;
	var hadBeen = args.hadBeen;
	var thenVariable = args.thenVariable;
	var wouldhaveBeen = args.wouldhaveBeen;
	var givenActualLatents = args.givenActualLatents;
	var givenActualStates = args.givenActualStates ? args.givenActualStates : statesModel(givenActualLatents);
	return infer(function() {
		var cfLatents = counterfactualizeLatents(latentsModel, givenActualLatents);
		var cfStates = statesModel(cfLatents);
		condition(cfStates[ifVariable]==hadBeen);
		return cfStates[thenVariable]==wouldhaveBeen
	});
};

var latents = latentsModel();
var states = statesModel(latents);
display(states);

var ifNotAThenNotB = counterfactually({
	ifVariable: "A",
	hadBeen: false,
	thenVariable: "B",
	wouldhaveBeen: false,
	givenActualLatents: {model: "A->B", A: true}
});
var ifNotBThenNotA = counterfactually({
	ifVariable: "B",
	hadBeen: false,
	thenVariable: "A",
	wouldhaveBeen: false,
	givenActualLatents: {model: "A->B", A: true}
});

display(ifNotAThenNotB);
display(ifNotBThenNotA);

"finished";