
// --------------------------- utils -------------------------------------------

var match = function(inferred, observed) {
	var overlappingKeys = _.object(map(function(k) {
		return [k, inferred[k]];
	}, _.keys(observed)));

	return _.isEqual(overlappingKeys, observed);
};

var reduce_to_matching_keys = function(bigger_object, limiting_object) {
	var overlappingKeys = _.object(map(function(k) {
		return [k, bigger_object[k]];
	}, _.keys(limiting_object)));
	return overlappingKeys;
};

var matchingFactor = function(interpretationERP, obs) {
	if (interpretationERP=="enumeration error") {
		return -Infinity;
	} else {
		// obs.input might have more keys than interpretationERP.input
		var reducedInterpretationERP = Infer(
			{method: "enumerate"},
			function() {
				var result = sample(interpretationERP);
				return {
					structureParams: result.structureParams,
					input: reduce_to_matching_keys(result.input, obs.input),
					output: result.output
				}
			}
		);
		// display(obs);
		// display(reducedInterpretationERP);
		return reducedInterpretationERP.score(obs);
	}
};

var cleanup = function(erp) {
	var all_false = reduce(
		function(s, acc) {
			var stillFalse = s.truthFactor == -Infinity;
			return acc && stillFalse;
		},
		true,
		erp.support()
	);
	if (all_false) {
		return "enumeration error";
	} 
	return Infer(
		{method: "enumerate"},
		function() {
			var s = sample(erp);
			factor(s.truthFactor);
			return s.observations;
		}
	);
};

var marginalize = function(erp, variable) {
	if (erp=="enumeration error") {
		return erp;
	} else {
		return Infer({method: "enumerate"}, function() {
			return (sample(erp))[variable];
		});
	}
};

// --------------------------- defaults ----------------------------------------

var defaults = {
	lambda1: 1,
	lambda2: 1,
	stickiness: 0.53,
	inferQUD: false,
	qud: "max",
	inferCG: false,
	cg: [],
	cgStates: {},
	inferLexicon: false,
	lexicon: "explanandum",
	utteranceSet: "yes/no", // for s1
	inferenceOpts: {
		literal: {method: "enumerate"},
		s1: {method: "enumerate"},
		listener: {method: "enumerate"},
		s2: {method: "enumerate"}
	},
	interlocuter: "s1",
	costPerWord: 0,
	passErr: false // default is crash instead of passing the error up the chain
};

// --------------------------- counterfactuals logic ---------------------------

var counterfactualizeLatents = function(model, actual, stickiness) {
	var s = stickiness ? stickiness : 0.53;
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

// --------------------------- forward sample ----------------------------------

var worldModel = function(params) {
	var params = params ? params : {};

	// forwardSample can sample both actual AND
	// counterfactual worlds. by default, it only
	// samples actual worlds.
	var returnCF = params.returnCF ? params.returnCF : false;

	// if we do return counterfactuals, we need to
	// decide on a stickiness parameter
	var stickiness = (
		params.stickiness ? params.stickiness : defaults.stickiness
	);

	var passErr = params.passErr ? params.passErr : defaults.passErr;

	// by default, forward sample samples from the prior
	// and ignores all observations.
	// we can choose to condition on the observed
	// structureParams, input, and/or output.
	var useObs = params.useObs ? params.useObs : {
		structureParams: false,
		input: false,
		output: false
	};

	// observations can be specified for a specific
	// call to forwardSample. But in general, 
	// observations will be taken from the
	// observations.wppl file in `stories` directory,
	// defined in the `observations` variable in
	// `autoexpanded.wppl`.
	var obs = params.obs ? params.obs : observations;

	if (params.obs) {
		if (params.obs.structureParams && !useObs.structureParams) {
			display("warning 2340910928")
		}
		if (params.obs.input && !useObs.input) { display("warning 234013") }
		if (params.obs.input && !useObs.input) { display("warning 59834872") }
	}

	// we can also include counterfactual premises for
	// this function.
	var cfObs = params.cfObs ? params.cfObs : {};
	if (params.cfObs && !params.returnCF) { display("warning 2394810") }

	return function() {

		var structureParams = structureParamsPrior();
		var input = inputPrior();
		var sampleParams = sampleParamsPrior();

		var program = makeProgram(structureParams);
		var returnValues = program(input, sampleParams);
		var output = returnValues.output;
		var actualERPs = returnValues.ERPs;

		var structFactor = (
			useObs.structureParams ?
			(match(structureParams, obs.structureParams) ? 0 : -Infinity) :
			0
		);
		var inputFactor = (
			useObs.input ?
			(match(input, obs.input) ? 0 : -Infinity) :
			0
		);
		var outputFactor = (
			useObs.output ?
			(match(output, obs.output) ? 0 : -Infinity) :
			0
		);

		// return a world

		// only counterfactualize if we have to,
		// because it can be costly.
		if (returnCF) {

			// then sticky sample cfSampleParams
			var cfSampleParams = counterfactualizeLatents(
				sampleParamsPrior,
				sampleParams,
				stickiness
			);
			// and cfInput
			var cfInput = counterfactualizeLatents(
				inputPrior,
				input,
				stickiness
			);
			// and cfStructureParams
			var cfStructureParams = counterfactualizeLatents(
				structureParamsPrior,
				structureParams,
				stickiness
			);
			// and calculate corresponding output
			var cfProgram = makeProgram(cfStructureParams, actualERPs);
			var cfReturnValues = cfProgram(cfInput, cfSampleParams);
			var cfOutput = cfReturnValues.output;


			// condition on any counterfactual premises
			// (found in cfObs)

			var cfStructFactor = (
				cfObs.structureParams ?
				(match(cfStructureParams, cfObs.structureParams) ? 0 : -Infinity) :
				0
			);
			var cfInputFactor = (
				cfObs.input ?
				(match(cfInput, cfObs.input) ? 0 : -Infinity) :
				0
			);
			var cfOutputFactor = (
				cfObs.output ?
				(match(cfOutput, cfObs.output) ? 0 : -Infinity) :
				0
			);

			var truthFactor = (structFactor + inputFactor + outputFactor +
				cfStructFactor + cfInputFactor + cfOutputFactor);
			var result = {
				structureParams: structureParams,
				input: input,
				output: output,
				cfStructureParams: cfStructureParams,
				cfInput: cfInput,
				cfOutput: cfOutput
			};

			if (passErr) {
				return {
					truthFactor: truthFactor,
					observations: result
				}
			} else {
				factor(truthFactor);
				return result;
			}
		} else {
			var truthFactor = (structFactor + inputFactor + outputFactor);
			var result = {
				structureParams: structureParams,
				input: input,
				output: output,
			};
			if (passErr) {
				return {
					truthFactor: truthFactor,
					observations: result
				}
			} else {
				factor(truthFactor);
				return result;
			}
		}

		// TO DO: when sampleParams are relevant,
		// we might want to infer them and look at their
		// values.
	};
};

// --------------------------- utterance prior ---------------------------------

var utterancePriorMaker = function(params) {
	var utteranceSet = params.utteranceSet ? params.utteranceSet : defaults.utteranceSet;
	var costPerWord = params.costPerWord ? params.costPerWord : defaults.costPerWord;
	var actualUtterance = params.actualUtterance ? params.actualUtterance : false;

	var getExplanandum = function(utterance) {
		if (utterance) {
			var words = actualUtterance.split(" ");
			var becauseIndex = words.indexOf("because");
			var explanandum = words.slice(1,becauseIndex).join(" ");
			return explanandum;
		} else {
			return "thereisnoexplanandumforthisprior";
		}
	};

	var convertPriorType = function(utteranceSet, actualUtterance) {
		if (utteranceSet == "even_more") {
			return "all_alternatives"
		} else if ("yes/no") {
			return ":" + actualUtterance;
		} else {
			display("warning 092834");
			return utteranceSet;
		}
	};

	var priorType = convertPriorType(utteranceSet, actualUtterance)
	var base_utterances = expressions;
	var explanandum = getExplanandum(actualUtterance);

	// in case we get ":", a signal to check "yes or no" for the rest
	var explanationOrSilent = [priorType.slice(1,priorType.length), ""];

	// for each base expression
	// we can say that expression
	var unaryUtterances = base_utterances.concat(
		// or we can negate it
		map(function(u) {return "! " + u;}, base_utterances))

	// for each pair of unary expressions
	// we can say "and", "or", or "because"
	var binaryUtterances = reduce(function(u1, acc) {
		return acc.concat(
			// and
			map(function (u2) {
				return u1 + " and " + u2;
			}, unaryUtterances)).concat(
			// or
			map(function (u2) {
				return u1 + " or " + u2;
			}, unaryUtterances))
	}, [], unaryUtterances);

	var allBecauseUtterances = reduce(function(u1, acc) {
		return acc.concat(
			// because
			map(function (u2) {
				return u1 + " because " + u2;
			}, unaryUtterances))
	}, [], unaryUtterances);

	var selectBecauseUtterances = reduce(function(u1, acc) {
		if (u1 == explanandum) {
			return acc.concat(
				// because
				map(function (u2) {
					return u1 + " because " + u2;
				}, unaryUtterances))
		} else {
			return acc;
		}
	}, [], unaryUtterances);

	var getUtteranceSet = function() {
		if (priorType == "all_alternatives") {
			return [""].concat(
				unaryUtterances
			).concat(
				binaryUtterances
			).concat(allBecauseUtterances)
		} else if (priorType == "only_explanations") {
			return allBecauseUtterances;
		} else if (priorType == "only_explanations_or_silent") {
			return [""].concat(allBecauseUtterances);
		} else if (priorType == "fixed_explanandum") {
			return selectBecauseUtterances;
		} else if (priorType == "fixed_explanandum_or_silent") {
			return [""].concat(selectBecauseUtterances);
		} else if (priorType[0] == ":") {
			// a signal to check "yes or no" for the rest
			return explanationOrSilent;
		} else {
			display("error 20932423: invalid priorType");
			return [""];
		}
	};

	var utteranceERP = Infer({method: "enumerate"}, function() {
		var allUtterances = getUtteranceSet();
		var utterance = uniformDraw(allUtterances);
		// for ":" prior type, that's yes/no and they're equally costly
		if (utterance!="" & priorType[0]!=":") {
			factor(- costPerWord * utterance.split(" ").length)
		}
		return utterance;
	});

	return function() {
		sample(utteranceERP);
	};
};

var lookupUtterancePrior = cache(function(params) {
	return utterancePriorMaker(params);
});

// --------------------------- other priors ------------------------------------

var qudFns = {
	max: function(world) {return world}
	// TO DO other QUDs
};
var getCGStates = function(world, cg) {
	var asList = map(
	  function(variable) {return [variable, world.output[variable]];},
	  cg
	);
	return _.object(asList);
};

// TO DO
var qudPrior = function() {};
var cgPrior = function() {};
var lexiconPrior = function() {};

// --------------------------- RSA ---------------------------------------------

var conditionExplanansERP = cache(function(explanans, obs, actualSampleParams) {
	var explanansFalseVariable = explanans[0]=="!" ? true : false;
	var explanans = explanans[0]=="!" ? explanans[1] : explanans;
	return Infer(
		{method: "enumerate"},
		function() {
			// var cfPremise = {};
			// cfPremise[explanans] = false;
			// counterfactual(0.53, cfPremise, obs);

			var stickiness = 0.53;

			// now sticky sample cfSampleParams
			var cfSampleParams = counterfactualizeLatents(
				sampleParamsPrior,
				actualSampleParams,
				stickiness
			);
			// and cfInput
			var cfInput = counterfactualizeLatents(
				inputPrior,
				obs.input,
				stickiness
			);
			// and cfStructureParams
			var cfStructureParams = counterfactualizeLatents(
				structureParamsPrior,
				obs.structureParams,
				stickiness
			);

			// and calculate corresponding output
			var cfProgram = makeProgram(cfStructureParams);
			var cfReturnValues = cfProgram(cfInput, cfSampleParams);
			var cfOutput = cfReturnValues.output;

			// condition on the explanans variable having the
			// value that would make the explanans false
			condition(cfOutput[explanans]==explanansFalseVariable)

			// will the explanandum consequently be false??
			return cfOutput;
		}
	);
});

var getExplanandumFalseScore = function(explanandum, erp) {
	var explanandumFalseVariable = explanandum[0]=="!" ? true : false;
	var explanandumVariable = explanandum[0]=="!" ? explanandum[1] : explanandum;

	var marginal = Infer({method: "enumerate"}, function() {
		var s = sample(erp);
		return s[explanandumVariable] == explanandumFalseVariable;
	});
	return marginal.score(true);
};

var getScore = function(variable, erp) {
	var marginal = Infer({method: "enumerate"}, function() {
		var s = sample(erp);
		return s.variable == value;
	});
	return marginal.score(true);
};

var meaning = function(obs, utterance, actualSampleParams, actualERPs, entailmentType) {
	var entailmentType = entailmentType ? entailmentType : "none";

	var words = utterance.split(" ");
	if (utterance=="") {
		return 0;
	} else if (words.length==1) {
		var word = words[0];
		return (obs.output)[word] ? 0 : -Infinity;
	} else if (words.length==2 && words[0] == "!") {
		var word = words[1];
		return !(obs.output)[word] ? 0 : -Infinity;
	} else if (words.length>=3) {
		if (words.indexOf("and") > -1) {
			var phrase1 = words.slice(0, words.indexOf("and")).join("");
			var phrase2 = words.slice(words.indexOf("and")+1).join("");
			var TV1 = phrase1[0]=="!" ? !(obs.output)[phrase1[1]] : (obs.output)[phrase1];
			var TV2 = phrase2[0]=="!" ? !(obs.output)[phrase2[1]] : (obs.output)[phrase2];
			return TV1 && TV2 ? 0 : -Infinity;
		} else if (words.indexOf("or") > -1) {
			var phrase1 = words.slice(0, words.indexOf("or")).join("");
			var phrase2 = words.slice(words.indexOf("or")+1).join("");
			var TV1 = phrase1[0]=="!" ? !(obs.output)[phrase1[1]] : (obs.output)[phrase1];
			var TV2 = phrase2[0]=="!" ? !(obs.output)[phrase2[1]] : (obs.output)[phrase2];
			return TV1 || TV2 ? 0 : -Infinity;
		} else if (words.indexOf("because") > -1) {
			var explanandum = words.slice(0, words.indexOf("because")).join("");
			var explanans = words.slice(words.indexOf("because")+1).join("");
			var conditionedOnExplanansFalse = conditionExplanansERP(explanans, obs, actualSampleParams, actualERPs);
			var scoreExplanandumFalse = getExplanandumFalseScore(explanandum, conditionedOnExplanansFalse);
			
			var explanandumValue = explanandum[0]=="!" ? false : true;
			var explanandumVariable = explanandum[0]=="!" ? explanandum[1] : explanandum;
			var explanansValue = explanans[0]=="!" ? false : true;
			var explanansVariable = explanans[0]=="!" ? explanans[1] : explanans;
			var explanansScore = (obs.output)[explanansVariable]==explanansValue ? 0 : -Infinity;
			var explanandumScore = (obs.output)[explanandumVariable]==explanandumValue ? 0 : -Infinity;

			if (entailmentType == "none") {
				return scoreExplanandumFalse;
			} else if (entailmentType == "only_explanandum") {
				return scoreExplanandumFalse + explanandumScore;
			} else if (entailmentType == "only_explanans") {
				return scoreExplanandumFalse + explanansScore;
			} else if (entailmentType == "both") {
				return scoreExplanandumFalse + explanansScore + explanandumScore;
			} else {
				display("error 2349081");
			}
		}
		display("warning 21391")
		return 0;
	}
	display("warning 123");
	return 0;
};

var literal = function(params) {
	var params = params ? params : {};

	var utterance = params.utterance;

	var lexicon = params.lexicon ? params.lexicon : defaults.lexicon;
	var getEntailmentType = function(lexicon) {
		if (lexicon == "explanandum") {
			return "only_explanandum";
		} else if (lexicon == "explanans") {
			return "only_explanans";
		} else if (lexicon == "both" || lexicon=="none") {
			return lexicon;
		} else {
			display("warning -9382423: " + lexicon);
		}
	};
	var entailmentType = getEntailmentType(lexicon);

	return function() {
		// first sample actualSampleParams
		var actualSampleParams = sampleParamsPrior();
		var actualInput = inputPrior();
		var actualStructureParams = structureParamsPrior();
		var actualProgram = makeProgram(actualStructureParams);
		var actualReturnValues = actualProgram(actualInput, actualSampleParams);
		var actualOutput = actualReturnValues.output;
		var actualERPs = actualReturnValues.ERPs;
		var obs = {
			structureParams: actualStructureParams,
			input: actualInput,
			output: actualOutput
		}

		var truthFactor = meaning(obs, utterance, actualSampleParams, actualERPs, entailmentType);

		return {
			observations: obs,
			truthFactor: truthFactor
		};
	}
};
var literalERP = cache(function(params) {
	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);
	return cleanup(Infer(inferenceOpts.literal, literal(params)));
});

var s1 = function(params) {
	var params = params ? params : {};

	// communicate the world, if provided. otherwise communicate
	// actual observations from experiment
	var world = params.world ? params.world : observations;

	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);

	var qud = params.qud ? params.qud : defaults.qud;
	var cgStates = params.cgStates ? params.cgStates : {};
	var lexicon = params.lexicon ? params.lexicon : defaults.lexicon;
	var utteranceSet = (
		params.utteranceSet ? params.utteranceSet : defaults.utteranceSet
	);
	var costPerWord = (
		params.costPerWord ? params.costPerWord : defaults.costPerWord
	);

	var lambda1 = params.lambda1 ? params.lambda1 : defaults.lambda1;
	var stickiness = (
		params.stickiness ? params.stickiness : defaults.stickiness
	);
	var actualUtterance = (
		params.actualUtterance ? params.actualUtterance : false
	);

	var passErr = params.passErr ? params.passErr : defaults.passErr;

	return function() {

		var utterancePrior = lookupUtterancePrior({
			utteranceSet: utteranceSet,
			actualUtterance: actualUtterance,
			costPerWord: costPerWord
		});
		var utterance = utterancePrior();

		// factor by interpretation
		var literalInterpretation = literalERP({
			inferenceOpts: inferenceOpts,
			utterance: utterance,
			qud: qud,
			cgStates: cgStates,
			lexicon: lexicon,
			stickiness: stickiness,
			passErr: true
		});

		// the speaker makes sure that their
 		// observations line up with interpretation
		var interpretationFactor = matchingFactor(
			literalInterpretation, world
		);

		var truthFactor = lambda1 * interpretationFactor;
		
		if (passErr) {
			return {
				truthFactor:truthFactor,
				observations: utterance
			};
		} else {
			factor(truthFactor);
			return utterance;
		}
	};
};
var s1ERP = cache(function(params) {
	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);
	return cleanup(Infer(inferenceOpts.s1, s1(params)));
});

var listener = function(params) {
	var params = params ? params : {};

	var utterance = params.utterance;

	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);

	var utteranceSet = (
		params.utteranceSet ? params.utteranceSet : defaults.utteranceSet
	);

	var lambda1 = params.lambda1 ? params.lambda1 : defaults.lambda1;
	var stickiness = (
		params.stickiness ? params.stickiness : defaults.stickiness
	);
	var actualUtterance = (
		params.actualUtterance ? params.actualUtterance : false
	);
	var costPerWord = (
		params.costPerWord ? params.costPerWord : defaults.costPerWord
	);

	var passErr = params.passErr ? params.passErr : defaults.passErr;

	var inferQUD = params.inferQUD ? params.inferQUD : defaults.inferQUD;
	var inferCG = params.inferCG ? params.inferCG : defaults.inferCG;
	var inferLexicon = (
		params.inferLexicon ? params.inferLexicon : defaults.inferLexicon
	);

	var qud = inferQUD ? qudPrior() : (params.qud ? params.qud : defaults.qud);
	var cg = inferCG ? qudPrior() : (params.cg ? params.cg : defaults.cg);
	var lexicon = inferLexicon ? qudPrior() : (
		params.lexicon ? params.lexicon : defaults.lexicon
	);

	if (params.cg && params.inferCG) { display("warning 72913"); }
	if (params.qud && params.inferQUD) { display("warning 19482"); }
	if (params.lexicon && params.inferLexicon) { display("warning 73830427"); }

	return function() {

		// sample a world
		// note that counterfactual sampling happens inside meaning function
		var world = (worldModel({
			returnCF: false
		}))();

		var cgStates = getCGStates(world, cg);

		// factor by speaker
		var speakerEndorsement = s1ERP({
			inferenceOpts: inferenceOpts,
			world: world,
			qud: qud,
			cgStates: cgStates,
			lexicon: lexicon,
			lambda1: lambda1,
			stickiness: stickiness,
			actualUtterance: actualUtterance,
			utteranceSet: utteranceSet,
			costPerWord: costPerWord,
			passErr: true
		});

		var truthFactor = speakerEndorsement.score(utterance);

		if (passErr) {
			return {
				truthFactor: truthFactor,
				observations: world
			}
		} else {
			factor(truthFactor);
			return world;
		}
	};
};
var listenerERP = cache(function(params) {
	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);
	return cleanup(Infer(inferenceOpts.listener, listener(params)));
});

var s2 = function(params) {
	var params = params ? params : {};

	// form the utterancePrior based on what was
	// actually said.
	var actualUtterance = params.actualUtterance;

	var utteranceSet = (
		params.utteranceSet ? params.utteranceSet : defaults.utteranceSet
	);

	// observations can be specified with params.
	// But in general, 
	// observations will be taken from the
	// observations.wppl file in `stories` directory,
	// defined in the `observations` variable in
	// `autoexpanded.wppl`.
	var obs = params.obs ? params.obs : observations;

	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);
	var costPerWord = (
		params.costPerWord ? params.costPerWord : defaults.costPerWord
	);

	var passErr = params.passErr ? params.passErr : defaults.passErr;

	var inferQUD = params.inferQUD ? params.inferQUD : defaults.inferQUD;
	var inferCG = params.inferCG ? params.inferCG : defaults.inferCG;
	var inferLexicon = (
		params.inferLexicon ? params.inferLexicon : defaults.inferLexicon
	);

	var lambda1 = params.lambda1 ? params.lambda1 : defaults.lambda1;
	var lambda2 = params.lambda2 ? params.lambda2 : defaults.lambda2;
	var stickiness = (
		params.stickiness ? params.stickiness : defaults.stickiness
	);

	var qud = inferQUD ? qudPrior() : (params.qud ? params.qud : defaults.qud);
	var cg = inferCG ? qudPrior() : (params.cg ? params.cg : defaults.cg);
	var lexicon = inferLexicon ? qudPrior() : (
		params.lexicon ? params.lexicon : defaults.lexicon
	);

	if (params.cg && params.inferCG) { display("warning 72913"); }
	if (params.qud && params.inferQUD) { display("warning 19482"); }
	if (params.lexicon && params.inferLexicon) { display("warning 73830427"); }

	return function() {

		// utterancePrior for s2 is always "yes/no"
		var utterancePrior = lookupUtterancePrior({
			utteranceSet: "yes/no",
			actualUtterance: actualUtterance
		});
		var utterance = utterancePrior();

		// factor by interpretation
		var pragmaticInterpretation = listenerERP({
			inferenceOpts: inferenceOpts,
			utterance: utterance,
			qud: qud,
			cg: cg,
			lexicon: lexicon,
			inferQUD: inferQUD,
			inferCG: inferCG,
			inferLexicon: inferLexicon,
			lambda1: lambda1,
			stickiness: stickiness,
			actualUtterance: actualUtterance,
			costPerWord: costPerWord,
			utteranceSet: utteranceSet,
			passErr: true
		});

		// TO DO
		// incorporate QUD

		// the speaker makes sure that their
 		// observations line up with interpretation
		var interpretationFactor = matchingFactor(
			pragmaticInterpretation, obs
		);

		var truthFactor = lambda2 * interpretationFactor;

		if (passErr) {
			return {
				truthFactor: truthFactor,
				observations: utterance
			}
		} else {
			factor(truthFactor);
			return utterance
		}
	}
};
var s2ERP = cache(function(params) {
	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);
	return cleanup(Infer(inferenceOpts.s2, s2(params)));
});

// --------------------------- BDA ---------------------------------------------

var lambda1Prior = function() {
	// see Tessler & Goodman 2016
	return uniform(0, 20);
};
var lambda2Prior = function() {
	// see Tessler & Goodman 2016
	return uniform(0, 5);
};
var stickinessPrior = function() {
	// uninformative prior between 0 and 1
	return uniform(0, 1);
};
var costPrior = function() {
	// TO DO
	// not sure what this should be
	return uniform(0, 10);
};
var model = function(params) {
	var params = params ? params : {};

	// specifies which listener/speaker model to run
	var interlocuter = (
		params.interlocuter ? params.interlocuter : defaults.interlocuter
	);
	var interlocuterLevel = [
		"literal", "s1", "listener", "s2"
	].indexOf(interlocuter);
	if (interlocuterLevel < 0) { display("warning 23409834") };

	// fixed parameters
	var inferenceOpts = (
		params.inferenceOpts ? params.inferenceOpts : defaults.inferenceOpts
	);
	var utteranceSet = (
		params.utteranceSet ? params.utteranceSet : defaults.utteranceSet
	);
	var qud = params.qud ? params.qud : defaults.qud;
	var cgStates = params.cgStates ? params.cgStates : defaults.cgStates;
	var lexicon = params.lexicon ? params.lexicon : defaults.lexicon;
	var inferQUD = params.inferQUD ? params.inferQUD : defaults.inferQUD;
	var inferCG = params.inferCG ? params.inferCG : defaults.inferCG;
	var inferLexicon = (
		params.inferLexicon ? params.inferLexicon : defaults.inferLexicon
	);
	var qud = inferQUD ? qudPrior() : (params.qud ? params.qud : defaults.qud);
	var cg = inferCG ? qudPrior() : (params.cg ? params.cg : defaults.cg);
	var lexicon = inferLexicon ? qudPrior() : (
		params.lexicon ? params.lexicon : defaults.lexicon
	);
	if (params.cg && params.inferCG) { display("warning 72913"); }
	if (params.qud && params.inferQUD) { display("warning 19482"); }
	if (params.lexicon && params.inferLexicon) { display("warning 73830427"); }

	// inferred parameters
	var lambda1 = interlocuterLevel > 0 ? lambda1Prior() : false;
	var lambda2 = interlocuterLevel > 2 ? lambda2Prior() : false;
	var stickiness = stickinessPrior();
	var costPerWord = interlocuterLevel > 0 ? costPrior() : false;
	var actualUtterance = (
		params.actualUtterance ? params.actualUtterance : false
	);

	if (interlocuter == "literal") {
		return literal({
			utterance: params.utterance,
			qud: qud,
			cgStates: cgStates,
			lexicon: lexicon,
			stickiness: stickiness
		});
	} else if (interlocuter == "s1") {
		return s1({
			inferenceOpts: inferenceOpts,
			world: params.world,
			qud: qud,
			cgStates: cgStates,
			lexicon: lexicon,
			lambda1: lambda1,
			stickiness: stickiness,
			actualUtterance: actualUtterance,
			costPerWord: costPerWord
		});
	} else if (interlocuter == "listener") {
		return listener({
			inferenceOpts: inferenceOpts,
			utterance: params.utterance,
			qud: qud,
			cg: cg,
			lexicon: lexicon,
			inferQUD: inferQUD,
			inferCG: inferCG,
			inferLexicon: inferLexicon,
			lambda1: lambda1,
			stickiness: stickiness,
			actualUtterance: actualUtterance,
			costPerWord: costPerWord
		})
	} else if (interlocuter == "s2") {
		return s2({
			inferenceOpts: inferenceOpts,
			world: params.world,
			qud: qud,
			cg: cg,
			lexicon: lexicon,
			inferQUD: inferQUD,
			inferCG: inferCG,
			inferLexicon: inferLexicon,
			lambda1: lambda1,
			lambda2: lambda2,
			stickiness: stickiness,
			actualUtterance: actualUtterance,
			costPerWord: costPerWord
		});
	}
};

"finished"
