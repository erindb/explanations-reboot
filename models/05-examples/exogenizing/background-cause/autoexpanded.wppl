// ------------ explanation-related utils ----------

var stickySampler = cache(function(args) {
	var erp = args.erp;
	var origERP = args.origERP ? args.origERP : null;
	var erpLabel = args.erpLabel;

	return jsUtils.makeStickySamplingFunction(erp, origERP, erpLabel);
});

var discreteUniformERP = Infer(
	{method: "enumerate"},
	function() {
		return uniformDraw(
			_.range(0, 1, 0.05)
		);
	}
);

// var myUniform = function() {return uniform(0, 1)};
var myUniform = function() {return sample(discreteUniformERP);};

// ------------ CF prior -------------------

var structureParamsPrior = function() {
	// no CF-able structural params
	// in this program
	return {};
};

var inputPrior = function() {
	return {A: flip(0.5)};
};

var sampleParamsPrior = function() {
	return {
		A2B: myUniform(),
		backgroundB: myUniform()
	};
};

// ------------ make program -------------------

var makeProgram = function(structureParams, origERPs) {
	return function (input, sampleParams) {
	
		var A = input.A;
		
		var A2BERP = Bernoulli({p: (0.75)});
		var A2BSampler = stickySampler({
			erp: serializeDist(A2BERP),
			erpLabel: "A2B",
			origERP: origERPs ? serializeDist(origERPs["A2B"]) : null
		});
		var A2B = A2BSampler(sampleParams["A2B"]);
		
		var backgroundBERP = Bernoulli({p: (0.2)});
		var backgroundBSampler = stickySampler({
			erp: serializeDist(backgroundBERP),
			erpLabel: "backgroundB",
			origERP: origERPs ? serializeDist(origERPs["backgroundB"]) : null
		});
		var backgroundB = backgroundBSampler(sampleParams["backgroundB"]);
		var B = (A && A2B) || backgroundB;
	
		return {
			ERPs: {
				A2B: A2BERP,
backgroundB: backgroundBERP
			},
			expressions: {
				"A": A,
				"B": B
			},
			output: {
			A: A,
			B: B
		}
		};
	};
	
};



var observations = false;

// ------------ forward samples -------------------

var forwardSample = function(obs) {
	var obs = observations ? observations : obs;
	var sampleParams = sampleParamsPrior();
	var input = obs.input;
	var structureParams = obs.structureParams;
	var program = makeProgram(structureParams);
	var returnValues = program(input, sampleParams);
	var output = returnValues.output;
	return output;
};

var highOrderForwardSample = function(obs) {
	var obs = observations ? observations : obs;
	var sampleParams = sampleParamsPrior();
	var input = inputPrior();
	var structureParams = obs.structureParams;
	var program = makeProgram(structureParams);
	var returnValues = program(input, sampleParams);
	var output = returnValues.output;
	return output;
};

// -------- explanation logic ----

var counterfactualizeLatents = function(model, actual, stickiness) {
	var s = stickiness ? stickiness : 0.53;
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var match = function(inferred, observed) {
	var overlappingKeys = _.object(map(function(k) {
		return [k, inferred[k]];
	}, _.keys(observed)));

	return _.isEqual(overlappingKeys, observed);
};

var counterfactual = function(stickiness, cfPremise, obs) {
	var obs = observations ? observations : obs;
	
	// first infer actualSampleParams from actualOutput
	var actualSampleParams = sampleParamsPrior();
	var actualInput = obs.input;
	var actualStructureParams = obs.structureParams;
	var actualProgram = makeProgram(actualStructureParams);
	var actualReturnValues = actualProgram(actualInput, actualSampleParams);
	var actualOutput = actualReturnValues.output;
	var actualERPs = actualReturnValues.ERPs;
	condition(match(actualOutput, obs.output));

	// then sticky sample cfSampleParams
	var cfSampleParams = counterfactualizeLatents(
		sampleParamsPrior,
		actualSampleParams,
		stickiness
	);
	// and cfInput
	var cfInput = counterfactualizeLatents(
		inputPrior,
		actualInput,
		stickiness
	);
	// and cfStructureParams
	var cfStructureParams = counterfactualizeLatents(
		structureParamsPrior,
		actualStructureParams,
		stickiness
	);
	// and calculate corresponding output
	var cfProgram = makeProgram(cfStructureParams, actualERPs);
	var cfReturnValues = cfProgram(cfInput, cfSampleParams);
	var cfOutput = cfReturnValues.output;

	// condition on cfPremise if applicable
	if (cfPremise) {
		condition(match(cfOutput, cfPremise));
	}

	// return cfOutput
	return cfOutput;
};

var inferSampleParams = cache(function(obs) {
	var obs = observations ? observations : obs;
	return Infer(
		{method: "MCMC", samples: 10000},
		function() {
			var sampleParams = sampleParamsPrior();
			var input = obs.input;
			var structureParams = obs.structureParams;
			var program = makeProgram(structureParams);
			var returnValues = program(input, sampleParams);
			var output = returnValues.output;
			condition(match(output, obs.output));
			return sampleParams;
		});
});

var counterfactualWithSubinference = function(stickiness, cfPremise) {

	// first infer actualSampleParams from actualOutput
	var actualSampleParams = sample(inferSampleParams(obs));
	var actualStructureParams = obs.structureParams;
	var actualInput = obs.input;
	var actualOutput = obs.output;

	// then sticky sample cfSampleParams
	var cfSampleParams = counterfactualizeLatents(
		sampleParamsPrior,
		actualSampleParams,
		stickiness
	);
	// and cfInput
	var cfInput = counterfactualizeLatents(
		inputPrior,
		actualInput,
		stickiness
	);
	// and cfStructureParams
	var cfStructureParams = counterfactualizeLatents(
		structureParamsPrior,
		actualStructureParams,
		stickiness
	);
	// and calculate corresponding output
	var cfProgram = makeProgram(cfStructureParams, actualStructureParams);
	var cfReturnValues = cfProgram(cfInput, cfSampleParams, actualInput, actualSampleParams);
	var cfOutput = cfReturnValues.output;

	// condition on cfPremise if applicable
	if (cfPremise) {
		condition(match(cfOutput, cfPremise));
	}

	// return cfOutput
	return cfOutput;
};

"finished";
