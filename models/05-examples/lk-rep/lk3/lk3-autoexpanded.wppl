// ------------ explanation-related utils ----------

var stickySample = function(args) {
	var erp = args.erp;
	var currentLatents = args.currentLatents;
	var origLatents = args.origLatents;
	var erpLabel = args.erpLabel;

	var probability = (currentLatents.sampleParams)[erpLabel];

	if (origLatents) {
		return jsUtils.inverseCDFMaxOverlapWithLookup(erp, erpLabel, probability, currentLatents, origLatents);
	} else {
		return jsUtils.inverseCDFWithLog(erp, erpLabel, probability, currentLatents);
	}
};

var discreteUniformERP = Infer(
	{method: "enumerate"},
	function() {
		return uniformDraw(
			_.range(0, 1, 0.1).concat([1])
		);
	}
);

// var myUniform = function() {return uniform(0, 1)};
var myUniform = function() {return sample(discreteUniformERP);};

// ------------ CF prior -------------------

var structureParamsPrior = function() {
	// no CF-able structural params
	// in this program
	return {};
};

var inputPrior = function() {
	return {
		A: flip(0.25),
		B: flip(0.1)
	};
};

var sampleParamsPrior = function() {
	return {
		
	};
};

// ------------ make program -------------------

var makeProgram = function(structureParams, origStructureParams) {
	return function (input, sampleParams, origInput, origSampleParams) {

		var currentLatents = {
			input: input,
			structureParams: structureParams,
			sampleParams: sampleParams
		};
		var origLatents = ((origInput && origStructureParams && origSampleParams) ?
			{
				input: origInput,
				structureParams: origStructureParams,
				sampleParams: origSampleParams
			} :
			null
		)
	
		var xor = function(a,b) {
			return (a || b) && !(a && b);
		};
	
		var A = input.A;
		var B = input.B;
		var C = xor(A, B);
	
		return {
			expressions: {
				"A": A,
				"B": B,
				"C": C
			},
			output: {
			A: A,
			B: B,
			C: C
		}
		};
	};
	
};



// ------------ observations -------------------

var observations = {
	structureParams: {},
	input: {
		A: true,
		B: true
	},
	output: {
		A: true,
		B: true,
		C: false
	}
};



// ------------ forward samples -------------------

var forwardSample = function() {
	var sampleParams = sampleParamsPrior();
	var input = observations.input;
	var structureParams = observations.structureParams;
	var program = makeProgram(structureParams);
	var returnValues = program(input, sampleParams);
	var output = returnValues.output;
	return output;
};

// -------- explanation logic ----

var counterfactualizeLatents = function(model, actual, stickiness) {
	var s = stickiness ? stickiness : 0.53;
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var match = function(inferred, observed) {
	var overlappingKeys = _.object(map(function(k) {
		return [k, inferred[k]];
	}, _.keys(observed)));

	return _.isEqual(overlappingKeys, observed);
};

var counterfactual = function(stickiness, cfPremise) {
	
	// first infer actualSampleParams from actualOutput
	var actualSampleParams = sampleParamsPrior();
	var actualInput = observations.input;
	var actualStructureParams = observations.structureParams;
	var actualProgram = makeProgram(actualStructureParams);
	var actualReturnValues = actualProgram(actualInput, actualSampleParams);
	var actualOutput = actualReturnValues.output;
	condition(match(actualOutput, observations.output));

	// then sticky sample cfSampleParams
	var cfSampleParams = counterfactualizeLatents(
		sampleParamsPrior,
		actualSampleParams,
		stickiness
	);
	// and cfInput
	var cfInput = counterfactualizeLatents(
		inputPrior,
		actualInput,
		stickiness
	);
	// and cfStructureParams
	var cfStructureParams = counterfactualizeLatents(
		structureParamsPrior,
		actualStructureParams,
		stickiness
	);
	// and calculate corresponding output
	var cfProgram = makeProgram(cfStructureParams, actualStructureParams);
	var cfReturnValues = cfProgram(cfInput, cfSampleParams, actualInput, actualSampleParams);
	var cfOutput = cfReturnValues.output;

	// condition on cfPremise if applicable
	if (cfPremise) {
		condition(match(cfOutput, cfPremise));
	}

	// return cfOutput
	return cfOutput;
};

var inferSampleParams = cache(function(observations) {
	return Infer(
		{method: "MCMC", samples: 10000},
		function() {
			var sampleParams = sampleParamsPrior();
			var input = observations.input;
			var structureParams = observations.structureParams;
			var program = makeProgram(structureParams);
			var returnValues = program(input, sampleParams);
			var output = returnValues.output;
			condition(match(output, observations.output));
			return sampleParams;
		});
});

var counterfactualWithSubinference = function(stickiness, cfPremise) {

	// first infer actualSampleParams from actualOutput
	var actualSampleParams = sample(inferSampleParams(observations));
	var actualStructureParams = observations.structureParams;
	var actualInput = observations.input;
	var actualOutput = observations.output;

	// then sticky sample cfSampleParams
	var cfSampleParams = counterfactualizeLatents(
		sampleParamsPrior,
		actualSampleParams,
		stickiness
	);
	// and cfInput
	var cfInput = counterfactualizeLatents(
		inputPrior,
		actualInput,
		stickiness
	);
	// and cfStructureParams
	var cfStructureParams = counterfactualizeLatents(
		structureParamsPrior,
		actualStructureParams,
		stickiness
	);
	// and calculate corresponding output
	var cfProgram = makeProgram(cfStructureParams, actualStructureParams);
	var cfReturnValues = cfProgram(cfInput, cfSampleParams, actualInput, actualSampleParams);
	var cfOutput = cfReturnValues.output;

	// condition on cfPremise if applicable
	if (cfPremise) {
		condition(match(cfOutput, cfPremise));
	}

	// return cfOutput
	return cfOutput;
};

"finished";
