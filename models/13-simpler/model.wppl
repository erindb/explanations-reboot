// -------- defaults --------------

var identity = function(x) {return x;};
var extract_causal_parameters = function(x) {return x.causal_parameters;};
var extract_actual = function(x) {return x.actual;};
var extract_counterfactual = function(x) {return x.counterfactual;};

var defaults = {
  stickiness: 0.53,
  parent_prior_prob: 0.5,
  prob_of_causal_link: 0.5,
  causal_strength: 0.9,
  effect_background_prior_prob: 0,
  background_knowledge: {},
  QUD: extract_causal_parameters,
  project: false
};

// -------- utils -----------------

var DEBUG = true;
// var DEBUG = false;
var debug = function(string) {
  if (DEBUG) {
    display(string);
  }
};

var error = function(id) {
  console.log("error " + id);
  stop;
};

var thunk = function(fn) {return function() {return fn();}};

var check = function(variable, varname, var_type) {
  if (typeof(varname)!="string") {error("98273649");};
  if (typeof(var_type)!="string") {error("3871304");};
  var variable = variable ? variable : defaults[varname];
  if (typeof(variable)!=var_type) {error("230947091834");};
};

var map_object = function(fn, keys) {
  return _.zipObject(keys, map(fn, keys));
};

var apply = function(fn) {
  return fn();
};

var and = function(lst) {
  return reduce(function(elem, acc) {
    return elem && acc;
  }, true, lst);
};

var or = function(lst) {
  return reduce(function(elem, acc) {
    return elem || acc;
  }, false, lst);
};

var soft_condition = function(boolean) {
  factor(boolean ? 0 : -1000);
};

var soft_factor = function(score) {
  factor(score == -Infinity ? -10000 : score);
};

// -------- exogenized program ----

// two potential parents: A and B
// one potential child: E
// for each parent, there *could* be a causal link to E
// if no link, then no cause. if linked, then actual cause is stochastic
// E is true whenever A_cause OR B_cause

// sampling parameters are RESAMPLED in the counterfactual world,
// whereas causal parameters are held constant.
var causal_parameter_prior = function(params) {
  var prob_of_causal_link = (
    params.prob_of_causal_link ?
    params.prob_of_causal_link :
    defaults.prob_of_causal_link
  );
  return {
    AE: flip(prob_of_causal_link),
    BE: flip(prob_of_causal_link)
  };
};

// because sampling parameters are resampled but causal parameters are not,
// sampling parameters can depend on causal parameters.
// this minimizes the random choices, but it's possible these parameters
// could be marginalized out, under the right circumstances
var sampling_parameter_prior = function(params) {
  // causal_parameters, paramname, causal_strength, parent_prior_prob,
  // effect_background_prior_prob
  var causal_parameters = params.causal_parameters;
  var paramname = params.paramname ? params.paramname : false;
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  // the functions for sampling:
  var priors = {

    // "actual cause enabled" parameters:
    AE: function() {
      return (
        causal_parameters.AE ? flip(causal_strength) : false
      );
    },
    BE: function() {
      return (
        causal_parameters.BE ? flip(causal_strength) : false
      );
    },
    // "prior" parameters:
    A: function() {
      return (
        flip(parent_prior_prob)
      );
    },
    B: function() {
      return (
        flip(parent_prior_prob)
      );
    },
    // the "effect" could have a "background cause"
    E: function() {
      return (
        flip(effect_background_prior_prob)
      );
    }
  };
  // the logic for sampling them:
  if (paramname) {
    // sample only that parameter
    return apply(priors[paramname]);
  } else {
    // sample all of them
    map_object(function(paramname) {
      sampling_parameter_prior({
        causal_parameters: causal_parameters,
        paramname: paramname,
        causal_strength: causal_strength,
        parent_prior_prob: parent_prior_prob,
        effect_background_prior_prob: effect_background_prior_prob
      });
    }, _.keys(priors));
  }
};

var world_from_parameters = function(causal_parameters, sampling_parameters) {

  var A = sampling_parameters.A;
  var B = sampling_parameters.B;

  var actual_cause_AE = A && sampling_parameters.AE;
  var actual_cause_BE = B && sampling_parameters.BE;
  var background_cause_E = sampling_parameters.E;

  var E = (actual_cause_AE || actual_cause_BE) || background_cause_E;

  return {A: A, B: B, E: E};
};

// -------- counterfactuals -------

var counterfactualize = function(params) {
  // actual_sampling_parameters,
  // sampling_parameter_prior,
  // causal_parameters,
  // stickiness
  var actual_sampling_parameters = params.actual_sampling_parameters;
  var causal_parameters = params.causal_parameters;

  // unknowns
  var stickiness = (
    params.stickiness ? params.stickiness : defaults.stickiness
  );
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  // map across all actual parameters
  // either keep that value or resample a new one

  return map_object(function(paramname) {
    if (flip(stickiness)) {
      return actual_sampling_parameters[paramname];
    } else {
  // causal_parameters, paramname, causal_strength, parent_prior_prob,
  // effect_background_prior_prob
      return sampling_parameter_prior({
        causal_parameters: causal_parameters,
        paramname: paramname,
        causal_strength: causal_strength,
        parent_prior_prob: parent_prior_prob,
        effect_background_prior_prob: effect_background_prior_prob
      });
    }
  }, _.keys(actual_sampling_parameters));
};

// -------- forward sample --------
// sample actual and counterfactual worlds

var forward_sample = function(params) {
  // background_knowledge, stickiness
  var background_knowledge = (
    params.background_knowledge ? 
    params.background_knowledge : 
    defaults.background_knowledge
  );

  // unknowns
  var stickiness = (
    params.stickiness ? params.stickiness : defaults.stickiness
  );
  var prob_of_causal_link = (
    params.prob_of_causal_link ?
    params.prob_of_causal_link :
    defaults.prob_of_causal_link
  );
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  return function() {
    // same causal parameters for actual and counterfactual
    var causal_parameters = causal_parameter_prior({
      prob_of_causal_link: prob_of_causal_link
    });

    // different sampling parameters for actual vs counterfactual,
    // counterfactual sampling parameters are based on the actual ones
    var actual_sampling_parameters = sampling_parameter_prior({
      causal_parameters: causal_parameters,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    });
    // worlds are deteriminstic functions of parameters
    var actual_world = world_from_parameters(
      causal_parameters,
      actual_sampling_parameters
    );

    // condition on background knowledge being the same as the actual world
    soft_condition(and(map(function(varname) {
      actual_world[varname] == background_knowledge[varname];
    }, _.keys(background_knowledge))))

    // different sampling parameters for actual vs counterfactual,
    // counterfactual sampling parameters are based on the actual ones
    var counterfactual_sampling_parameters = counterfactualize({
      actual_sampling_parameters: actual_sampling_parameters,
      causal_parameters: causal_parameters,
      stickiness: stickiness,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    });
    // worlds are deteriminstic functions of parameters
    var counterfactual_world = world_from_parameters(
      causal_parameters,
      counterfactual_sampling_parameters
    );

    return {
      actual: actual_world,
      counterfactual: counterfactual_world,
      causal_parameters: causal_parameters
    };
  };
};

// -------- literal ---------------
// condition on meanings of utterances

var meaning = function(params) {

  // utterance, actual, counterfactual, stickiness
  var utterance = params.utterance;
  var actual = params.actual;
  var counterfactual = params.counterfactual;

  if (utterance=="null") { return true; } else {
    var phrases = utterance.split(", and ");
    if (phrases.length>1) {
      if (phrases.length==2) {
        return (
          meaning({
            utterance: phrases[0],
            actual: actual,
            counterfactual: counterfactual
          }) &&
          meaning({
            utterance: phrases[1],
            actual: actual,
            counterfactual: counterfactual
          })
        );
      } else {
        console.log("error 2304981");
        stop;
      }
    } else {
      var words = utterance.split(" ");
      var because_index = words.indexOf("because");
      if (because_index >= 0) {
        var explanandum = words.slice(0, because_index).join(" ");
        var explanans = words.slice(because_index+1, words.length).join(" ");
        // explanans || !explanandum
        return (
          meaning({
            utterance: explanans,
            actual: counterfactual
          }) || 
          !meaning({
            utterance: explanandum,
            actual: counterfactual
          })
        );
      } else {
        if (words[0]=="!") {
          return !meaning({
            utterance: words.slice(1,words.length),
            actual: actual
          });
        } else {
          if (words.length != 1) {
            console.log("error 9823741");
            stop;
          }
          return actual[words[0]]==true;
        }
      }
    }
  }
};

var literal = function(params) {
  // utterance, background_knowledge, QUD, stickiness
  var utterance = params.utterance;
  var background_knowledge = (
    params.background_knowledge ?
    params.background_knowledge :
    defaults.background_knowledge
  );
  var QUD = (
    params.QUD ? params.QUD : defaults.QUD
  );
  var project = (
    typeof(params.project)=="undefined" ? 
    defaults.project : 
    params.project
  );

  // unknowns
  var stickiness = (
    params.stickiness ? params.stickiness : defaults.stickiness
  );
  var prob_of_causal_link = (
    params.prob_of_causal_link ?
    params.prob_of_causal_link :
    defaults.prob_of_causal_link
  );
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  return function() {

    var world_prior = forward_sample({
      background_knowledge: background_knowledge,
      stickiness: stickiness,
      prob_of_causal_link: prob_of_causal_link,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    });
    var worlds = world_prior();

    var causal_parameters = worlds.causal_parameters;
    var actual_world = worlds.actual;
    var counterfactual_world = worlds.counterfactual;

    soft_condition(meaning({
      utterance: utterance,
      actual: actual_world,
      counterfactual: counterfactual_world
    }));

    var world = {
      actual: actual_world,
      counterfactual: counterfactual_world,
      causal_parameters: causal_parameters
    };

    return project ? QUD(world) : world;
  };
};
var literalERP = cache(function(params) {
  return Infer({method: "enumerate"}, literal(params));
});

// -------- speaker ---------------

var utterance_prior = function() {
  return uniformDraw([
    "null",
    // "E because A, and E because B",
    "E because A",
    "E because B"
  ]);
};

var speaker = function(params) {
  var actual_value_of_QUD = params.actual_value_of_QUD;
  var background_knowledge = (
    params.background_knowledge ?
    params.background_knowledge :
    defaults.background_knowledge
  );
  var QUD = (
    params.QUD ? params.QUD : defaults.QUD
  );
  var project = (
    typeof(params.project)=="undefined" ? 
    defaults.project : 
    params.project
  );

  // unknowns
  var stickiness = (
    params.stickiness ? params.stickiness : defaults.stickiness
  );
  var prob_of_causal_link = (
    params.prob_of_causal_link ?
    params.prob_of_causal_link :
    defaults.prob_of_causal_link
  );
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  return function() {
    var utterance = utterance_prior();
    var interpretation = literalERP({
      utterance: utterance,
      background_knowledge: background_knowledge,
      QUD: QUD,
      stickiness: stickiness,
      project: true,
      prob_of_causal_link: prob_of_causal_link,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    });
    soft_factor(interpretation.score(actual_value_of_QUD));
    return utterance;
  };
};
var speakerERP = cache(function(params) {
  return Infer({method: "enumerate"}, speaker(params));
});

// -------- listener --------------

var listener = function(params) {
  // utterance, background_knowledge, QUD, stickiness
  var utterance = params.utterance;
  var background_knowledge = (
    params.background_knowledge ?
    params.background_knowledge :
    defaults.background_knowledge
  );
  var QUD = (
    params.QUD ? params.QUD : defaults.QUD
  );
  var project = (
    typeof(params.project)=="undefined" ? 
    defaults.project : 
    params.project
  );

  // unknowns
  var stickiness = (
    params.stickiness ? params.stickiness : defaults.stickiness
  );
  var prob_of_causal_link = (
    params.prob_of_causal_link ?
    params.prob_of_causal_link :
    defaults.prob_of_causal_link
  );
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  return function() {
    var actual_world = (forward_sample({
      background_knowledge: background_knowledge,
      stickiness: stickiness,
      prob_of_causal_link: prob_of_causal_link,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    }))();
    var description = speakerERP({
      actual_value_of_QUD: QUD(actual_world),
      background_knowledge: background_knowledge,
      QUD: QUD,
      stickiness: stickiness,
      prob_of_causal_link: prob_of_causal_link,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    });
    soft_factor(description.score(utterance));
    return project ? QUD(actual_world) : actual_world;
  };
};
var listenerERP = cache(function(params) {
  return Infer({method: "enumerate"}, listener(params));
});

// -------- s2 --------------------

var s2 = function(params) {
  var actual_value_of_QUD = params.actual_value_of_QUD;
  var background_knowledge = (
    params.background_knowledge ?
    params.background_knowledge :
    defaults.background_knowledge
  );
  var QUD = (
    params.QUD ? params.QUD : defaults.QUD
  );

  // unknowns
  var stickiness = (
    params.stickiness ? params.stickiness : defaults.stickiness
  );
  var prob_of_causal_link = (
    params.prob_of_causal_link ?
    params.prob_of_causal_link :
    defaults.prob_of_causal_link
  );
  var causal_strength = (
    params.causal_strength ?
    params.causal_strength :
    defaults.causal_strength
  );
  var parent_prior_prob = (
    params.parent_prior_prob ?
    params.parent_prior_prob :
    defaults.parent_prior_prob
  );
  var effect_background_prior_prob = (
    params.effect_background_prior_prob ?
    params.effect_background_prior_prob :
    defaults.effect_background_prior_prob
  );

  return function() {
    var utterance = utterance_prior();
    debug(utterance);
    var interpretation = listenerERP({
      utterance: utterance,
      background_knowledge: background_knowledge,
      QUD: QUD,
      stickiness: stickiness,
      project: true,
      prob_of_causal_link: prob_of_causal_link,
      causal_strength: causal_strength,
      parent_prior_prob: parent_prior_prob,
      effect_background_prior_prob: effect_background_prior_prob
    });
    soft_factor(interpretation.score(actual_value_of_QUD));
    return utterance;
  };
};
var s2ERP = cache(function(params) {
  return Infer({method: "enumerate"}, speaker(params));
});

"finished";