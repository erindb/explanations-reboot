
// ------------ forward samples -------------------

var forwardSample = function(obs) {
	var obs = observations ? observations : obs;
	var sampleParams = sampleParamsPrior();
	var input = obs.input;
	var structureParams = obs.structureParams;
	var program = makeProgram(structureParams);
	var returnValues = program(input, sampleParams);
	var output = returnValues.output;
	return output;
};

var highOrderForwardSample = function(obs) {
	var obs = observations ? observations : obs;
	var sampleParams = sampleParamsPrior();
	var input = inputPrior();
	var structureParams = obs.structureParams;
	var program = makeProgram(structureParams);
	var returnValues = program(input, sampleParams);
	var output = returnValues.output;
	return output;
};

// -------- counterfactuals logic ----

var counterfactualizeLatents = function(model, actual, stickiness) {
	var s = stickiness ? stickiness : 0.53;
	var totallyDifferent = model();

	return mapObject(function(key, value) {
		return flip(s) ? actual[key] : totallyDifferent[key];
	}, actual);
};

var match = function(inferred, observed) {
	var overlappingKeys = _.object(map(function(k) {
		return [k, inferred[k]];
	}, _.keys(observed)));

	return _.isEqual(overlappingKeys, observed);
};

var counterfactual = function(stickiness, cfPremise, obs) {
	var obs = obs ? obs : observations;
	
	// first infer actualSampleParams from actualOutput
	var actualSampleParams = sampleParamsPrior();
	var actualInput = inputPrior();//obs.input;
	var actualStructureParams = structureParamsPrior();
	var actualProgram = makeProgram(actualStructureParams);
	var actualReturnValues = actualProgram(actualInput, actualSampleParams);
	var actualOutput = actualReturnValues.output;
	var actualERPs = actualReturnValues.ERPs;
	if (obs.structureParams) {
		condition(match(actualStructureParams, obs.structureParams));
	}
	if (obs.output) {
		condition(match(actualOutput, obs.output));
	}

	// then sticky sample cfSampleParams
	var cfSampleParams = counterfactualizeLatents(
		sampleParamsPrior,
		actualSampleParams,
		stickiness
	);
	// and cfInput
	var cfInput = counterfactualizeLatents(
		inputPrior,
		actualInput,
		stickiness
	);
	// and cfStructureParams
	var cfStructureParams = counterfactualizeLatents(
		structureParamsPrior,
		actualStructureParams,
		stickiness
	);
	// and calculate corresponding output
	var cfProgram = makeProgram(cfStructureParams, actualERPs);
	var cfReturnValues = cfProgram(cfInput, cfSampleParams);
	var cfOutput = cfReturnValues.output;

	// condition on cfPremise if applicable
	if (cfPremise) {
		condition(match(cfOutput, cfPremise));
	}

	// return cfOutput
	return cfOutput;
	// return {actual: actualOutput, cf: cfOutput}
};

var inferSampleParams = cache(function(obs) {
	var obs = observations ? observations : obs;
	return Infer(
		{method: "MCMC", samples: 10000},
		function() {
			var sampleParams = sampleParamsPrior();
			var input = inputPrior();//obs.input;
			var structureParams = obs.structureParams;
			var program = makeProgram(structureParams);
			var returnValues = program(input, sampleParams);
			var output = returnValues.output;
			condition(match(output, obs.output));
			return sampleParams;
		});
});

var counterfactualWithSubinference = function(stickiness, cfPremise) {

	// first infer actualSampleParams from actualOutput
	var actualSampleParams = sample(inferSampleParams(obs));
	var actualStructureParams = obs.structureParams;
	var actualInput = obs.input;
	var actualOutput = obs.output;

	// then sticky sample cfSampleParams
	var cfSampleParams = counterfactualizeLatents(
		sampleParamsPrior,
		actualSampleParams,
		stickiness
	);
	// and cfInput
	var cfInput = counterfactualizeLatents(
		inputPrior,
		actualInput,
		stickiness
	);
	// and cfStructureParams
	var cfStructureParams = counterfactualizeLatents(
		structureParamsPrior,
		actualStructureParams,
		stickiness
	);
	// and calculate corresponding output
	var cfProgram = makeProgram(cfStructureParams, actualStructureParams);
	var cfReturnValues = cfProgram(cfInput, cfSampleParams, actualInput, actualSampleParams);
	var cfOutput = cfReturnValues.output;

	// condition on cfPremise if applicable
	if (cfPremise) {
		condition(match(cfOutput, cfPremise));
	}

	// return cfOutput
	return cfOutput;
};

// -------- explanation logic ----

var counterfactuallyDifferent = function(explanans, explanandum) {
	return function() {
		// actual observations
		var obs = observations ? observations : obs;
		var stickiness = 0.53;
		
		// first infer actualSampleParams from actualOutput
		var actualSampleParams = sampleParamsPrior();
		var actualInput = inputPrior();//obs.input;
		var actualStructureParams = obs.structureParams;
		var actualProgram = makeProgram(actualStructureParams);
		var actualReturnValues = actualProgram(actualInput, actualSampleParams);
		var actualOutput = actualReturnValues.output;
		var actualExpressions = actualReturnValues.expressions;
		var actualERPs = actualReturnValues.ERPs;
		condition(match(actualOutput, obs.output));

		// then sticky sample cfSampleParams
		var cfSampleParams = counterfactualizeLatents(
			sampleParamsPrior,
			actualSampleParams,
			stickiness
		);
		// and cfInput
		var cfInput = counterfactualizeLatents(
			inputPrior,
			actualInput,
			stickiness
		);
		// and cfStructureParams
		var cfStructureParams = counterfactualizeLatents(
			structureParamsPrior,
			actualStructureParams,
			stickiness
		);
		// and calculate corresponding output
		var cfProgram = makeProgram(cfStructureParams, actualERPs);
		var cfReturnValues = cfProgram(cfInput, cfSampleParams);
		var cfOutput = cfReturnValues.output;
		var cfExpressions = cfReturnValues.expressions;

		// condition on explanans *changing*
		if (explanans) {
			condition( cfExpressions[explanans] != actualExpressions[explanans] );
		}

		// return whether or not explanandum changes
		if (explanandum) {
			return cfExpressions[explanandum] != actualExpressions[explanandum];
		} else {
			return cfOutput;
		}
	};
};

var explain = function(explanandum, alpha) {
	var alpha = alpha ? alpha : 1;
	console.log("to explain: ", explanandum);
	return function() {
		// of all possible explanations,
		var explanans = uniformDraw(expressions);
		console.log("  explaining: ", explanans);

		// which gives the most counterfactual
		// difference-making to the explanandum?
		var cfDifferenceMakingDist = Infer(
			{method: "enumerate"},
			counterfactuallyDifferent(
				explanans,
				explanandum
			)
		);

		var cfDifferenceMaking = cfDifferenceMakingDist.score(true);
		// higher difference-making is more better
		factor(alpha * cfDifferenceMaking);

		return explanans;
	};
};

// -------------- RSA ----------------

var utterancePriorMaker = function(base_utterances, priorType) {
	// for each base expression
	// we can say that expression
	var unaryUtterances = base_utterances.concat(
		// or we can negate it
		map(function(u) {return "! " + u;}, base_utterances))

	// for each pair of unary expressions
	// we can say "and", "or", or "because"
	var binaryUtterances = reduce(function(u1, acc) {
		return acc.concat(
			// and
			map(function (u2) {
				return u1 + " and " + u2;
			}, unaryUtterances)).concat(
			// or
			map(function (u2) {
				return u1 + " or " + u2;
			}, unaryUtterances))//.concat(
			// // because
			// map(function (u2) {
			// 	return u1 + " because " + u2;
			// }, unaryUtterances))
	}, [], unaryUtterances);

	var becauseUtterances = reduce(function(u1, acc) {
		return acc.concat(
			// because
			map(function (u2) {
				return u1 + " because " + u2;
			}, unaryUtterances))
	}, [], unaryUtterances);

	var possibleUtterances = (
		priorType=="all_alternatives" ?
		[""].concat(unaryUtterances).concat(binaryUtterances) :
		(priorType=="only_explanations") ? becauseUtterances : []
	);

	// score of utterance is based on length
	var utteranceERP = Infer(
		{method: "enumerate"},
		function() {
			// var utterance = uniformDraw([
			// 	"",
			// 	"A", "B",
			// 	"! A", "! B",
			// 	"A and B", "A or B",
			// 	"A and ! B", "A or ! B",
			// 	"! A and B", "! A or B",
			// 	"! A and ! B", "! A or ! B",
			// 	"A because B", "B because A",
			// 	"A because ! B", "B because ! A",
			// 	"! A because B", "! B because A",
			// 	"! A because ! B", "! B because ! A"
			// ]);
			
			var utterance = uniformDraw(possibleUtterances);
			// start with equal probability

			// var costPerWord = 6;
			// if (utterance!="") {
			// 	factor(- costPerWord * utterance.split(" ").length)
			// }
			return utterance;
		}
	);

	return function() {
		sample(utteranceERP);
	};
};

var utterancePriorAllAlternatives = utterancePriorMaker(expressions, "all_alternatives");
var utterancePriorOnlyExplanations = utterancePriorMaker(expressions, "only_explanations");

var possiblePriors = {
	all_alternatives: utterancePriorAllAlternatives,
	only_explanations: utterancePriorOnlyExplanations
};

var conditionExplanansERP = cache(function(explanans, obs, actualSampleParams, actualERPs) {
	var explanansFalseVariable = explanans[0]=="!" ? true : false;
	var explanans = explanans[0]=="!" ? explanans[1] : explanans;
	return Infer(
		{method: "enumerate"},
		function() {
			// var cfPremise = {};
			// cfPremise[explanans] = false;
			// counterfactual(0.53, cfPremise, obs);

			var stickiness = 0.53;

			// now sticky sample cfSampleParams
			var cfSampleParams = counterfactualizeLatents(
				sampleParamsPrior,
				actualSampleParams,
				stickiness
			);
			// and cfInput
			var cfInput = counterfactualizeLatents(
				inputPrior,
				obs.input,
				stickiness
			);
			// and cfStructureParams
			var cfStructureParams = counterfactualizeLatents(
				structureParamsPrior,
				obs.structureParams,
				stickiness
			);

			// and calculate corresponding output
			var cfProgram = makeProgram(cfStructureParams, actualERPs);
			var cfReturnValues = cfProgram(cfInput, cfSampleParams);
			var cfOutput = cfReturnValues.output;

			// condition on the explanans variable having the
			// value that would make the explanans false
			condition(cfOutput[explanans]==explanansFalseVariable)

			// will the explanandum consequently be false??
			return cfOutput;
		}
	);
});

var getExplanandumFalseScore = function(explanandum, erp) {
	var explanandumFalseVariable = explanandum[0]=="!" ? true : false;
	var explanandumVariable = explanandum[0]=="!" ? explanandum[1] : explanandum;

	var marginal = Infer({method: "enumerate"}, function() {
		var s = sample(erp);
		return s[explanandumVariable] == explanandumFalseVariable;
	});
	return marginal.score(true);
};

var getScore = function(variable, erp) {
	var marginal = Infer({method: "enumerate"}, function() {
		var s = sample(erp);
		return s.variable == value;
	});
	return marginal.score(true);
};

var meaning = function(obs, utterance, actualSampleParams, actualERPs) {
	var words = utterance.split(" ");
	if (utterance=="") {
		return 0;
	} else if (words.length==1) {
		var word = words[0];
		return (obs.output)[word] ? 0 : -Infinity;
	} else if (words.length==2 && words[0] == "!") {
		var word = words[1];
		return !(obs.output)[word] ? 0 : -Infinity;
	} else if (words.length>=3) {
		if (words.indexOf("and") > -1) {
			var phrase1 = words.slice(0, words.indexOf("and")).join("");
			var phrase2 = words.slice(words.indexOf("and")+1).join("");
			var TV1 = phrase1[0]=="!" ? !(obs.output)[phrase1[1]] : (obs.output)[phrase1];
			var TV2 = phrase2[0]=="!" ? !(obs.output)[phrase2[1]] : (obs.output)[phrase2];
			return TV1 && TV2 ? 0 : -Infinity;
		} else if (words.indexOf("or") > -1) {
			var phrase1 = words.slice(0, words.indexOf("or")).join("");
			var phrase2 = words.slice(words.indexOf("or")+1).join("");
			var TV1 = phrase1[0]=="!" ? !(obs.output)[phrase1[1]] : (obs.output)[phrase1];
			var TV2 = phrase2[0]=="!" ? !(obs.output)[phrase2[1]] : (obs.output)[phrase2];
			return TV1 || TV2 ? 0 : -Infinity;
		} else if (words.indexOf("because") > -1) {
			var explanandum = words.slice(0, words.indexOf("because")).join("");
			var explanans = words.slice(words.indexOf("because")+1).join("");
			var conditionedOnExplanansFalse = conditionExplanansERP(explanans, obs, actualSampleParams, actualERPs);
			var scoreExplanandumFalse = getExplanandumFalseScore(explanandum, conditionedOnExplanansFalse);
			return scoreExplanandumFalse;
		}
		display("warning 21391")
		return 0;
	}
	display("warning 123");
	return 0;
};

var cleanup = function(erp) {
	var all_false = reduce(
		function(s, acc) {
			var stillFalse = s.truthFactor == -Infinity;
			return acc && stillFalse;
		},
		true,
		erp.support()
	);
	if (all_false) {
		return "enumeration error";
	} 
	return Infer(
		{method: "enumerate"},
		function() {
			var s = sample(erp);
			factor(s.truthFactor);
			return s.observations;
		}
	);
};

var literal = function(utterance) {
	return function() {
		// first sample actualSampleParams
		var actualSampleParams = sampleParamsPrior();
		var actualInput = inputPrior();
		var actualStructureParams = structureParamsPrior();
		var actualProgram = makeProgram(actualStructureParams);
		var actualReturnValues = actualProgram(actualInput, actualSampleParams);
		var actualOutput = actualReturnValues.output;
		var actualERPs = actualReturnValues.ERPs;
		var obs = {
			structureParams: actualStructureParams,
			input: actualInput,
			output: actualOutput
		}

		var truthFactor = meaning(obs, utterance, actualSampleParams, actualERPs);

		return {
			observations: obs,
			truthFactor: truthFactor
		};
	}
};

var literalERP = cache(function(utterance) {
	return cleanup(Infer(
		{method: "enumerate"},
		literal(utterance)
	));
});

var matchingFactor = function(interpretationERP, obs) {
	if (interpretationERP=="enumeration error") {
		return -Infinity;
	} else {
		return interpretationERP.score(obs);
	}
};

var speaker = function(priorType, rationalityParam, obs) {
	// speaker might have observed anything
	var obs = observations ? observations : obs;
	var rationalityParam = rationalityParam ? rationalityParam : 1;

	// they choose something to say
	var utterancePrior = possiblePriors[priorType]
	var utterance = utterancePrior();
	// display(utterance);

	// the literal listener interprets this
	var interpretationERP = literalERP(utterance);

	// the speaker makes sure that their
	// observations line up with interpretation
	var s = matchingFactor(interpretationERP, obs);
	factor(rationalityParam * s);

	// and then they say it
	return utterance;
};

var listener = function(utterance) {};

// display(Infer({method: "enumerate"}, utterancePrior).support());

// display(Infer({method: "enumerate"}, speaker));

"finished"
